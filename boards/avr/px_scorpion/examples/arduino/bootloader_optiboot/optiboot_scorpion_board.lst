
optiboot_atmega328.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001ea  00007e00  00007e00  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .version      00000002  00007ffe  00007ffe  0000025e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .comment      00000030  00000000  00000000  00000260  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000028  00000000  00000000  00000290  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000593  00000000  00000000  000002b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000024b  00000000  00000000  0000084b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000361  00000000  00000000  00000a96  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000094  00000000  00000000  00000df8  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001d2  00000000  00000000  00000e8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000003ba  00000000  00000000  0000105e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000078  00000000  00000000  00001418  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00007e00 <main>:
#define wdtVect (*(uint16_t*)(RAMSTART+SPM_PAGESIZE*2+6))
#endif


/* main program starts here */
int main(void) {
    7e00:	1f 92       	push	r1
    7e02:	cd b7       	in	r28, 0x3d	; 61
    7e04:	de b7       	in	r29, 0x3e	; 62
  //  SP points to RAMEND
  //  r1 contains zero
  //
  // If not, uncomment the following instructions:
  // cli();
  asm volatile ("clr __zero_reg__");
    7e06:	11 24       	eor	r1, r1
#if defined(__AVR_ATmega8__) || defined (__AVR_ATmega32__)
  SP=RAMEND;  // This is done by hardware reset
#endif

  // GPIO initialisation (hardcoded version of board_init())
  PORTB = 0x06;
    7e08:	86 e0       	ldi	r24, 0x06	; 6
    7e0a:	85 b9       	out	0x05, r24	; 5
  DDRB  = 0x2F;
    7e0c:	8f e2       	ldi	r24, 0x2F	; 47
    7e0e:	84 b9       	out	0x04, r24	; 4
  PORTC = 0x0C;
    7e10:	8c e0       	ldi	r24, 0x0C	; 12
    7e12:	88 b9       	out	0x08, r24	; 8
  DDRC  = 0x00;
    7e14:	17 b8       	out	0x07, r1	; 7
  PORTD = 0xBF;
    7e16:	8f eb       	ldi	r24, 0xBF	; 191
    7e18:	8b b9       	out	0x0b, r24	; 11
  DDRD  = 0x62;
    7e1a:	82 e6       	ldi	r24, 0x62	; 98
    7e1c:	8a b9       	out	0x0a, r24	; 10
  DIDR0 = 0x03;
    7e1e:	83 e0       	ldi	r24, 0x03	; 3
    7e20:	80 93 7e 00 	sts	0x007E, r24
   * modified Adaboot no-wait mod.
   * Pass the reset reason to app.  Also, it appears that an Uno poweron
   * can leave multiple reset flags set; we only want the bootloader to
   * run on an 'external reset only' status
   */
  ch = MCUSR;
    7e24:	84 b7       	in	r24, 0x34	; 52
  MCUSR = 0;
    7e26:	14 be       	out	0x34, r1	; 52
  if (ch & (_BV(WDRF) | _BV(BORF) | _BV(PORF)))
    7e28:	98 2f       	mov	r25, r24
    7e2a:	9d 70       	andi	r25, 0x0D	; 13
    7e2c:	09 f0       	breq	.+2      	; 0x7e30 <main+0x30>
      appStart(ch);
    7e2e:	d7 d0       	rcall	.+430    	; 0x7fde <appStart>

#if LED_START_FLASHES > 0
  // Set up Timer 1 for timeout counter
  TCCR1B = _BV(CS12) | _BV(CS10); // div 1024
    7e30:	85 e0       	ldi	r24, 0x05	; 5
    7e32:	80 93 81 00 	sts	0x0081, r24
  UCSRA = _BV(U2X); //Double speed mode USART
  UCSRB = _BV(RXEN) | _BV(TXEN);  // enable Rx & Tx
  UCSRC = _BV(URSEL) | _BV(UCSZ1) | _BV(UCSZ0);  // config USART; 8N1
  UBRRL = (uint8_t)( (F_CPU + BAUD_RATE * 4L) / (BAUD_RATE * 8L) - 1 );
#else
  UART_SRA = _BV(U2X0); //Double speed mode USART0
    7e36:	82 e0       	ldi	r24, 0x02	; 2
    7e38:	80 93 c0 00 	sts	0x00C0, r24
  UART_SRB = _BV(RXEN0) | _BV(TXEN0);
    7e3c:	88 e1       	ldi	r24, 0x18	; 24
    7e3e:	80 93 c1 00 	sts	0x00C1, r24
  UART_SRC = _BV(UCSZ00) | _BV(UCSZ01);
    7e42:	86 e0       	ldi	r24, 0x06	; 6
    7e44:	80 93 c2 00 	sts	0x00C2, r24
  UART_SRL = (uint8_t)( (F_CPU + BAUD_RATE * 4L) / (BAUD_RATE * 8L) - 1 );
    7e48:	87 e0       	ldi	r24, 0x07	; 7
    7e4a:	80 93 c4 00 	sts	0x00C4, r24
#endif
#endif

  // Set up watchdog to trigger after 500ms
  watchdogConfig(WATCHDOG_1S);
    7e4e:	8e e0       	ldi	r24, 0x0E	; 14
    7e50:	b1 d0       	rcall	.+354    	; 0x7fb4 <watchdogConfig>

#if (LED_START_FLASHES > 0) || defined(LED_DATA_FLASH)
  /* Set LED pin as output */
  LED_DDR |= _BV(LED);
    7e52:	20 9a       	sbi	0x04, 0	; 4
    7e54:	26 e0       	ldi	r18, 0x06	; 6
}

#if LED_START_FLASHES > 0
void flash_led(uint8_t count) {
  do {
    TCNT1 = -(F_CPU/(1024*16));
    7e56:	8e e3       	ldi	r24, 0x3E	; 62
    7e58:	9e ef       	ldi	r25, 0xFE	; 254
    TIFR1 = _BV(TOV1);
    7e5a:	31 e0       	ldi	r19, 0x01	; 1
}

#if LED_START_FLASHES > 0
void flash_led(uint8_t count) {
  do {
    TCNT1 = -(F_CPU/(1024*16));
    7e5c:	90 93 85 00 	sts	0x0085, r25
    7e60:	80 93 84 00 	sts	0x0084, r24
    TIFR1 = _BV(TOV1);
    7e64:	36 bb       	out	0x16, r19	; 22
    while(!(TIFR1 & _BV(TOV1)));
    7e66:	b0 9b       	sbis	0x16, 0	; 22
    7e68:	fe cf       	rjmp	.-4      	; 0x7e66 <main+0x66>
#if defined(__AVR_ATmega8__)  || defined (__AVR_ATmega32__)
    LED_PORT ^= _BV(LED);
#else
    LED_PIN |= _BV(LED);
    7e6a:	18 9a       	sbi	0x03, 0	; 3
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    7e6c:	a8 95       	wdr
    7e6e:	21 50       	subi	r18, 0x01	; 1
    LED_PORT ^= _BV(LED);
#else
    LED_PIN |= _BV(LED);
#endif
    watchdogReset();
  } while (--count);
    7e70:	a9 f7       	brne	.-22     	; 0x7e5c <main+0x5c>
    7e72:	81 2c       	mov	r8, r1
    7e74:	91 2c       	mov	r9, r1
	     * Start the page erase and wait for it to finish.  There
	     * used to be code to do this while receiving the data over
	     * the serial link, but the performance improvement was slight,
	     * and we needed the space back.
	     */
	    __boot_page_erase_short((uint16_t)(void*)address);
    7e76:	93 e0       	ldi	r25, 0x03	; 3
    7e78:	f9 2e       	mov	r15, r25
	     */
	    do {
		uint16_t a;
		a = *bufPtr++;
		a |= (*bufPtr++) << 8;
		__boot_page_fill_short((uint16_t)(void*)addrPtr,a);
    7e7a:	ee 24       	eor	r14, r14
    7e7c:	e3 94       	inc	r14
	    } while (len -= 2);

	    /*
	     * Actually Write the buffer to flash (and wait for it to finish.)
	     */
	    __boot_page_write_short((uint16_t)(void*)address);
    7e7e:	25 e0       	ldi	r18, 0x05	; 5
    7e80:	d2 2e       	mov	r13, r18
	    boot_spm_busy_wait();
#if defined(RWWSRE)
	    // Reenable read access to flash
	    boot_rww_enable();
    7e82:	31 e1       	ldi	r19, 0x11	; 17
    7e84:	c3 2e       	mov	r12, r19
#endif

  /* Forever loop: exits by causing WDT reset */
  for (;;) {
    /* get character from UART */
    ch = getch();
    7e86:	8a d0       	rcall	.+276    	; 0x7f9c <getch>

    if(ch == STK_GET_PARAMETER) {
    7e88:	81 34       	cpi	r24, 0x41	; 65
    7e8a:	79 f4       	brne	.+30     	; 0x7eaa <main+0xaa>
      unsigned char which = getch();
    7e8c:	87 d0       	rcall	.+270    	; 0x7f9c <getch>
      verifySpace();
    7e8e:	89 83       	std	Y+1, r24	; 0x01
    7e90:	97 d0       	rcall	.+302    	; 0x7fc0 <verifySpace>
      /*
       * Send optiboot version as "SW version"
       * Note that the references to memory are optimized away.
       */
      if (which == 0x82) {
    7e92:	89 81       	ldd	r24, Y+1	; 0x01
    7e94:	82 38       	cpi	r24, 0x82	; 130
    7e96:	11 f4       	brne	.+4      	; 0x7e9c <main+0x9c>
	  putch(optiboot_version & 0xFF);
    7e98:	82 e0       	ldi	r24, 0x02	; 2
    7e9a:	05 c0       	rjmp	.+10     	; 0x7ea6 <main+0xa6>
      } else if (which == 0x81) {
    7e9c:	81 38       	cpi	r24, 0x81	; 129
    7e9e:	11 f4       	brne	.+4      	; 0x7ea4 <main+0xa4>
	  putch(optiboot_version >> 8);
    7ea0:	86 e0       	ldi	r24, 0x06	; 6
    7ea2:	01 c0       	rjmp	.+2      	; 0x7ea6 <main+0xa6>
      } else {
	/*
	 * GET PARAMETER returns a generic 0x03 reply for
         * other parameters - enough to keep Avrdude happy
	 */
	putch(0x03);
    7ea4:	83 e0       	ldi	r24, 0x03	; 3
    7ea6:	73 d0       	rcall	.+230    	; 0x7f8e <putch>
    7ea8:	6f c0       	rjmp	.+222    	; 0x7f88 <main+0x188>
      }
    }
    else if(ch == STK_SET_DEVICE) {
    7eaa:	82 34       	cpi	r24, 0x42	; 66
    7eac:	11 f4       	brne	.+4      	; 0x7eb2 <main+0xb2>
      // SET DEVICE is ignored
      getNch(20);
    7eae:	84 e1       	ldi	r24, 0x14	; 20
    7eb0:	03 c0       	rjmp	.+6      	; 0x7eb8 <main+0xb8>
    }
    else if(ch == STK_SET_DEVICE_EXT) {
    7eb2:	85 34       	cpi	r24, 0x45	; 69
    7eb4:	19 f4       	brne	.+6      	; 0x7ebc <main+0xbc>
      // SET DEVICE EXT is ignored
      getNch(5);
    7eb6:	85 e0       	ldi	r24, 0x05	; 5
    7eb8:	8b d0       	rcall	.+278    	; 0x7fd0 <getNch>
    7eba:	66 c0       	rjmp	.+204    	; 0x7f88 <main+0x188>
    }
    else if(ch == STK_LOAD_ADDRESS) {
    7ebc:	85 35       	cpi	r24, 0x55	; 85
    7ebe:	41 f4       	brne	.+16     	; 0x7ed0 <main+0xd0>
      // LOAD ADDRESS
      uint16_t newAddress;
      newAddress = getch();
    7ec0:	6d d0       	rcall	.+218    	; 0x7f9c <getch>
    7ec2:	88 2e       	mov	r8, r24
      newAddress = (newAddress & 0xff) | (getch() << 8);
    7ec4:	6b d0       	rcall	.+214    	; 0x7f9c <getch>
    7ec6:	91 2c       	mov	r9, r1
    7ec8:	98 2a       	or	r9, r24
#ifdef RAMPZ
      // Transfer top bit to RAMPZ
      RAMPZ = (newAddress & 0x8000) ? 1 : 0;
#endif
      newAddress += newAddress; // Convert from word address to byte address
    7eca:	88 0c       	add	r8, r8
    7ecc:	99 1c       	adc	r9, r9
    7ece:	5b c0       	rjmp	.+182    	; 0x7f86 <main+0x186>
      address = newAddress;
      verifySpace();
    }
    else if(ch == STK_UNIVERSAL) {
    7ed0:	86 35       	cpi	r24, 0x56	; 86
    7ed2:	21 f4       	brne	.+8      	; 0x7edc <main+0xdc>
      // UNIVERSAL command is ignored
      getNch(4);
    7ed4:	84 e0       	ldi	r24, 0x04	; 4
    7ed6:	7c d0       	rcall	.+248    	; 0x7fd0 <getNch>
      putch(0x00);
    7ed8:	80 e0       	ldi	r24, 0x00	; 0
    7eda:	e5 cf       	rjmp	.-54     	; 0x7ea6 <main+0xa6>
    }
    /* Write memory, length is big endian and is in bytes */
    else if(ch == STK_PROG_PAGE) {
    7edc:	84 36       	cpi	r24, 0x64	; 100
    7ede:	09 f0       	breq	.+2      	; 0x7ee2 <main+0xe2>
    7ee0:	36 c0       	rjmp	.+108    	; 0x7f4e <main+0x14e>
      // PROGRAM PAGE - we support flash programming only, not EEPROM
      uint8_t desttype;
      uint8_t *bufPtr;
      pagelen_t savelength;

      GETLENGTH(length);
    7ee2:	5c d0       	rcall	.+184    	; 0x7f9c <getch>
    7ee4:	5b d0       	rcall	.+182    	; 0x7f9c <getch>
    7ee6:	b8 2e       	mov	r11, r24
      savelength = length;
      desttype = getch();
    7ee8:	59 d0       	rcall	.+178    	; 0x7f9c <getch>
    7eea:	a8 2e       	mov	r10, r24
    7eec:	00 e0       	ldi	r16, 0x00	; 0
    7eee:	11 e0       	ldi	r17, 0x01	; 1

      // read a page worth of contents
      bufPtr = buff;
      do *bufPtr++ = getch();
    7ef0:	55 d0       	rcall	.+170    	; 0x7f9c <getch>
    7ef2:	f8 01       	movw	r30, r16
    7ef4:	81 93       	st	Z+, r24
    7ef6:	8f 01       	movw	r16, r30
      while (--length);
    7ef8:	be 12       	cpse	r11, r30
    7efa:	fa cf       	rjmp	.-12     	; 0x7ef0 <main+0xf0>

      // Read command terminator, start reply
      verifySpace();
    7efc:	61 d0       	rcall	.+194    	; 0x7fc0 <verifySpace>
 * void writebuffer(memtype, buffer, address, length)
 */
static inline void writebuffer(int8_t memtype, uint8_t *mybuff,
			       uint16_t address, pagelen_t len)
{
    switch (memtype) {
    7efe:	f5 e4       	ldi	r31, 0x45	; 69
    7f00:	af 12       	cpse	r10, r31
    7f02:	01 c0       	rjmp	.+2      	; 0x7f06 <main+0x106>
    7f04:	ff cf       	rjmp	.-2      	; 0x7f04 <main+0x104>
	     * Start the page erase and wait for it to finish.  There
	     * used to be code to do this while receiving the data over
	     * the serial link, but the performance improvement was slight,
	     * and we needed the space back.
	     */
	    __boot_page_erase_short((uint16_t)(void*)address);
    7f06:	f4 01       	movw	r30, r8
    7f08:	f7 be       	out	0x37, r15	; 55
    7f0a:	e8 95       	spm
	    boot_spm_busy_wait();
    7f0c:	07 b6       	in	r0, 0x37	; 55
    7f0e:	00 fc       	sbrc	r0, 0
    7f10:	fd cf       	rjmp	.-6      	; 0x7f0c <main+0x10c>
    7f12:	b4 01       	movw	r22, r8
    7f14:	a0 e0       	ldi	r26, 0x00	; 0
    7f16:	b1 e0       	ldi	r27, 0x01	; 1
	    /*
	     * Copy data from the buffer into the flash write buffer.
	     */
	    do {
		uint16_t a;
		a = *bufPtr++;
    7f18:	2c 91       	ld	r18, X
    7f1a:	12 96       	adiw	r26, 0x02	; 2
    7f1c:	ad 01       	movw	r20, r26
    7f1e:	41 50       	subi	r20, 0x01	; 1
    7f20:	51 09       	sbc	r21, r1
		a |= (*bufPtr++) << 8;
    7f22:	fa 01       	movw	r30, r20
    7f24:	80 81       	ld	r24, Z
    7f26:	30 e0       	ldi	r19, 0x00	; 0
    7f28:	38 2b       	or	r19, r24
		__boot_page_fill_short((uint16_t)(void*)addrPtr,a);
    7f2a:	fb 01       	movw	r30, r22
    7f2c:	09 01       	movw	r0, r18
    7f2e:	e7 be       	out	0x37, r14	; 55
    7f30:	e8 95       	spm
    7f32:	11 24       	eor	r1, r1
		addrPtr += 2;
    7f34:	6e 5f       	subi	r22, 0xFE	; 254
    7f36:	7f 4f       	sbci	r23, 0xFF	; 255
	    } while (len -= 2);
    7f38:	ba 12       	cpse	r11, r26
    7f3a:	ee cf       	rjmp	.-36     	; 0x7f18 <main+0x118>

	    /*
	     * Actually Write the buffer to flash (and wait for it to finish.)
	     */
	    __boot_page_write_short((uint16_t)(void*)address);
    7f3c:	f4 01       	movw	r30, r8
    7f3e:	d7 be       	out	0x37, r13	; 55
    7f40:	e8 95       	spm
	    boot_spm_busy_wait();
    7f42:	07 b6       	in	r0, 0x37	; 55
    7f44:	00 fc       	sbrc	r0, 0
    7f46:	fd cf       	rjmp	.-6      	; 0x7f42 <main+0x142>
#if defined(RWWSRE)
	    // Reenable read access to flash
	    boot_rww_enable();
    7f48:	c7 be       	out	0x37, r12	; 55
    7f4a:	e8 95       	spm
    7f4c:	1d c0       	rjmp	.+58     	; 0x7f88 <main+0x188>
      writebuffer(desttype, buff, address, savelength);


    }
    /* Read memory block mode, length is big endian.  */
    else if(ch == STK_READ_PAGE) {
    7f4e:	84 37       	cpi	r24, 0x74	; 116
    7f50:	69 f4       	brne	.+26     	; 0x7f6c <main+0x16c>
      uint8_t desttype;
      GETLENGTH(length);
    7f52:	24 d0       	rcall	.+72     	; 0x7f9c <getch>
    7f54:	23 d0       	rcall	.+70     	; 0x7f9c <getch>
    7f56:	b8 2e       	mov	r11, r24

      desttype = getch();
    7f58:	21 d0       	rcall	.+66     	; 0x7f9c <getch>

      verifySpace();
    7f5a:	32 d0       	rcall	.+100    	; 0x7fc0 <verifySpace>
    7f5c:	84 01       	movw	r16, r8
	    __asm__ ("elpm %0,Z+\n" : "=r" (ch), "=z" (address): "1" (address));
#else
	    // read a Flash byte and increment the address
	    __asm__ ("lpm %0,Z+\n" : "=r" (ch), "=z" (address): "1" (address));
#endif
	    putch(ch);
    7f5e:	f8 01       	movw	r30, r16
    7f60:	85 91       	lpm	r24, Z+
    7f62:	8f 01       	movw	r16, r30
    7f64:	14 d0       	rcall	.+40     	; 0x7f8e <putch>
	} while (--length);
    7f66:	ba 94       	dec	r11
    7f68:	d1 f7       	brne	.-12     	; 0x7f5e <main+0x15e>
    7f6a:	0e c0       	rjmp	.+28     	; 0x7f88 <main+0x188>
	  
      read_mem(desttype, address, length);
    }

    /* Get device signature bytes  */
    else if(ch == STK_READ_SIGN) {
    7f6c:	85 37       	cpi	r24, 0x75	; 117
    7f6e:	39 f4       	brne	.+14     	; 0x7f7e <main+0x17e>
      // READ SIGN - return what Avrdude wants to hear
      verifySpace();
    7f70:	27 d0       	rcall	.+78     	; 0x7fc0 <verifySpace>
      putch(SIGNATURE_0);
    7f72:	8e e1       	ldi	r24, 0x1E	; 30
    7f74:	0c d0       	rcall	.+24     	; 0x7f8e <putch>
      putch(SIGNATURE_1);
    7f76:	85 e9       	ldi	r24, 0x95	; 149
    7f78:	0a d0       	rcall	.+20     	; 0x7f8e <putch>
      putch(SIGNATURE_2);
    7f7a:	8f e0       	ldi	r24, 0x0F	; 15
    7f7c:	94 cf       	rjmp	.-216    	; 0x7ea6 <main+0xa6>
    }
    else if (ch == STK_LEAVE_PROGMODE) { /* 'Q' */
    7f7e:	81 35       	cpi	r24, 0x51	; 81
    7f80:	11 f4       	brne	.+4      	; 0x7f86 <main+0x186>
      // Adaboot no-wait mod
      watchdogConfig(WATCHDOG_16MS);
    7f82:	88 e0       	ldi	r24, 0x08	; 8
    7f84:	17 d0       	rcall	.+46     	; 0x7fb4 <watchdogConfig>
      verifySpace();
    }
    else {
      // This covers the response to commands like STK_ENTER_PROGMODE
      verifySpace();
    7f86:	1c d0       	rcall	.+56     	; 0x7fc0 <verifySpace>
    }
    putch(STK_OK);
    7f88:	80 e1       	ldi	r24, 0x10	; 16
    7f8a:	01 d0       	rcall	.+2      	; 0x7f8e <putch>
  }
    7f8c:	7c cf       	rjmp	.-264    	; 0x7e86 <main+0x86>

00007f8e <putch>:
}

void putch(char ch) {
#ifndef SOFT_UART
  while (!(UART_SRA & _BV(UDRE0)));
    7f8e:	90 91 c0 00 	lds	r25, 0x00C0
    7f92:	95 ff       	sbrs	r25, 5
    7f94:	fc cf       	rjmp	.-8      	; 0x7f8e <putch>
  UART_UDR = ch;
    7f96:	80 93 c6 00 	sts	0x00C6, r24
    7f9a:	08 95       	ret

00007f9c <getch>:
      [uartBit] "I" (UART_RX_BIT)
    :
      "r25"
);
#else
  while(!(UART_SRA & _BV(RXC0)))
    7f9c:	80 91 c0 00 	lds	r24, 0x00C0
    7fa0:	87 ff       	sbrs	r24, 7
    7fa2:	fc cf       	rjmp	.-8      	; 0x7f9c <getch>
    ;
  if (!(UART_SRA & _BV(FE0))) {
    7fa4:	80 91 c0 00 	lds	r24, 0x00C0
    7fa8:	84 fd       	sbrc	r24, 4
    7faa:	01 c0       	rjmp	.+2      	; 0x7fae <getch+0x12>
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    7fac:	a8 95       	wdr
       * don't care that an invalid char is returned...)
       */
    watchdogReset();
  }
  
  ch = UART_UDR;
    7fae:	80 91 c6 00 	lds	r24, 0x00C6
  LED_PIN |= _BV(LED);
#endif
#endif

  return ch;
}
    7fb2:	08 95       	ret

00007fb4 <watchdogConfig>:
    "wdr\n"
  );
}

void watchdogConfig(uint8_t x) {
  WDTCSR = _BV(WDCE) | _BV(WDE);
    7fb4:	e0 e6       	ldi	r30, 0x60	; 96
    7fb6:	f0 e0       	ldi	r31, 0x00	; 0
    7fb8:	98 e1       	ldi	r25, 0x18	; 24
    7fba:	90 83       	st	Z, r25
  WDTCSR = x;
    7fbc:	80 83       	st	Z, r24
    7fbe:	08 95       	ret

00007fc0 <verifySpace>:
  do getch(); while (--count);
  verifySpace();
}

void verifySpace() {
  if (getch() != CRC_EOP) {
    7fc0:	ed df       	rcall	.-38     	; 0x7f9c <getch>
    7fc2:	80 32       	cpi	r24, 0x20	; 32
    7fc4:	19 f0       	breq	.+6      	; 0x7fcc <verifySpace+0xc>
    watchdogConfig(WATCHDOG_16MS);    // shorten WD timeout
    7fc6:	88 e0       	ldi	r24, 0x08	; 8
    7fc8:	f5 df       	rcall	.-22     	; 0x7fb4 <watchdogConfig>
    7fca:	ff cf       	rjmp	.-2      	; 0x7fca <verifySpace+0xa>
    while (1)			      // and busy-loop so that WD causes
      ;				      //  a reset and app start.
  }
  putch(STK_INSYNC);
    7fcc:	84 e1       	ldi	r24, 0x14	; 20
    7fce:	df cf       	rjmp	.-66     	; 0x7f8e <putch>

00007fd0 <getNch>:
    ::[count] "M" (UART_B_VALUE)
  );
}
#endif

void getNch(uint8_t count) {
    7fd0:	cf 93       	push	r28
    7fd2:	c8 2f       	mov	r28, r24
  do getch(); while (--count);
    7fd4:	e3 df       	rcall	.-58     	; 0x7f9c <getch>
    7fd6:	c1 50       	subi	r28, 0x01	; 1
    7fd8:	e9 f7       	brne	.-6      	; 0x7fd4 <getNch+0x4>
  verifySpace();
}
    7fda:	cf 91       	pop	r28
}
#endif

void getNch(uint8_t count) {
  do getch(); while (--count);
  verifySpace();
    7fdc:	f1 cf       	rjmp	.-30     	; 0x7fc0 <verifySpace>

00007fde <appStart>:

void appStart(uint8_t rstFlags) {
  // save the reset flags in the designated register
  //  This can be saved in a main program by putting code in .init0 (which
  //  executes before normal c init code) to save R2 to a global variable.
  __asm__ __volatile__ ("mov r2, %0\n" :: "r" (rstFlags));
    7fde:	28 2e       	mov	r2, r24

  watchdogConfig(WATCHDOG_OFF);
    7fe0:	80 e0       	ldi	r24, 0x00	; 0
    7fe2:	e8 df       	rcall	.-48     	; 0x7fb4 <watchdogConfig>
  __asm__ __volatile__ (
    7fe4:	ee 27       	eor	r30, r30
    7fe6:	ff 27       	eor	r31, r31
    7fe8:	09 94       	ijmp
